import { parseEther, hexToBytes } from "viem";
import { encodeFunctionData, encodeDeployData } from "viem";
import { createWalletClient, http, custom } from "viem";
import { sepolia } from "viem/chains";
import { privateKeyToAccount } from "viem/accounts";
import { eip7702Actions } from "viem/experimental";

import * as config from './config';

// async function replayAuthorizedTransaction() {
//     // 1. 初始化代付账户(sponsor)的钱包客户端
//     const sponsorAccount = privateKeyToAccount(config.SPONSOR_PRIVATE_KEY);
//     const walletClient = createWalletClient({
//         account: sponsorAccount,
//         chain: sepolia,
//         transport: http(config.SEPOLIA_RPC),
//     }).extend(eip7702Actions());

//     // 2. 构造已有的授权信息(不需要再次签名)
//     // 修复了类型问题 - 根据 Authorization<number, boolean> 类型定义调整
//     const existingAuthorization = {
//         contractAddress: "0x6a06b2b7f83514f42764d412e54afaf4bb0265c8", // 合约地址 (修改了字段名)
//         chainId: parseInt("0xaa36a7", 16), // 转换为数字
//         nonce: parseInt("0x3", 16), // 转换为数字
//         yParity: 0, // 转换为数字
//         r: "0xe2e9be07dfeb0bf90c2f698e15a19b1ed5d58da21b4866d757e8b2540dc6bf9d",
//         s: "0x60f611a51958f964245918f1df6bc9d0274a67487fa5f4b516ec23acb531f609"
//     };

//     // 3. 发送交易，使用相同的input数据
//     const hash = await walletClient.sendTransaction({
//         account: sponsorAccount, // 代付账户支付gas
//         authorizationList: [existingAuthorization], // 使用已有的授权
//         to: "0x8c2451ae6edf47e9e17bcfa14062fc783df37d2f", // authorityAccount的地址
//         data: "0xa6d0ad610000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007b79995e5f793a07bc00c21412e50ecae098e7f900000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000000000000000000000000004d0e30db0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000009f61deb7909675f1330257499ac0c2428e2e1b000000000000000000000000000000000000000000000000000012309ce54000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007b79995e5f793a07bc00c21412e50ecae098e7f900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000009f61deb7909675f1330257499ac0c2428e2e1bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000",
//         value: "0x0"
//     });

//     console.log("✅ Replay transaction sent:", sepolia.blockExplorers.default.url + "/tx/" + hash);
// }


async function alternativeReplay() {
    const sponsorAccount = privateKeyToAccount(config.SPONSOR_PRIVATE_KEY);
    const walletClient = createWalletClient({
        account: sponsorAccount,
        chain: sepolia,
        transport: http(config.SEPOLIA_RPC),
    }).extend(eip7702Actions());

    // 使用类型断言解决类型不匹配问题
    const existingAuthorization = {
        contractAddress: "0x6a06b2b7f83514f42764d412e54afaf4bb0265c8", 
        chainId: 11155111,
        nonce: 3,
        yParity: 0,
        r: "0xe2e9be07dfeb0bf90c2f698e15a19b1ed5d58da21b4866d757e8b2540dc6bf9d",
        s: "0x60f611a51958f964245918f1df6bc9d0274a67487fa5f4b516ec23acb531f609"
    } as any; // 使用类型断言

    const hash = await walletClient.sendTransaction({
        account: sponsorAccount,
        authorizationList: [existingAuthorization],
        to: "0x8c2451ae6edf47e9e17bcfa14062fc783df37d2f",
        data: "0xa6d0ad610000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007b79995e5f793a07bc00c21412e50ecae098e7f900000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000000000000000000000000004d0e30db0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000009f61deb7909675f1330257499ac0c2428e2e1b000000000000000000000000000000000000000000000000000012309ce54000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007b79995e5f793a07bc00c21412e50ecae098e7f900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000009f61deb7909675f1330257499ac0c2428e2e1bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000",
        value: parseEther("0.0")
    });

    console.log("✅ Alternative replay transaction sent:", hash);
}


// 如果Viem库不支持直接使用已有授权，我们可以使用更底层的方法
// async function replayWithRawTransaction() {
//     // 使用定制RPC提供更底层的访问
//     const provider = custom({
//         http: {
//             url: config.SEPOLIA_RPC
//         }
//     });

//     // 构造完整的交易对象
//     const rawTx = {
//         from: "0x8a0a1da4d8db897c96700267a8246f340c18f426", // sponsor地址
//         to: "0x8c2451ae6edf47e9e17bcfa14062fc783df37d2f", // authority地址
//         data: "0xa6d0ad610000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007b79995e5f793a07bc00c21412e50ecae098e7f900000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000000000000000000000000004d0e30db0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000009f61deb7909675f1330257499ac0c2428e2e1b000000000000000000000000000000000000000000000000000012309ce54000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007b79995e5f793a07bc00c21412e50ecae098e7f900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000009f61deb7909675f1330257499ac0c2428e2e1bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000",
//         value: "0x0",
//         type: "0x4", // EIP-7702交易类型
//         chainId: "0xaa36a7",
//         gas: "0x4465b", // 使用与原交易相同或更高的gas limit
//         maxFeePerGas: "0x59caeb",
//         maxPriorityFeePerGas: "0xf4240",
//         authorizationList: [
//             {
//                 chainId: "0xaa36a7",
//                 address: "0x6a06b2b7f83514f42764d412e54afaf4bb0265c8",
//                 nonce: "0x3",
//                 yParity: "0x0",
//                 r: "0xe2e9be07dfeb0bf90c2f698e15a19b1ed5d58da21b4866d757e8b2540dc6bf9d",
//                 s: "0x60f611a51958f964245918f1df6bc9d0274a67487fa5f4b516ec23acb531f609"
//             }
//         ]
//     };

//     // 使用sponsor的私钥签名交易
//     const sponsorAccount = privateKeyToAccount(config.SPONSOR_PRIVATE_KEY);
//     const signedTx = await sponsorAccount.signTransaction(rawTx);

//     // 发送原始交易
//     const txHash = await provider.request({
//         method: 'eth_sendRawTransaction',
//         params: [signedTx]
//     });

//     console.log("✅ Raw replay transaction sent:", sepolia.blockExplorers.default.url + "/tx/" + txHash);
// }

// 第三种方法：使用ethers.js库实现更精细的控制
// async function replayWithEthers() {
//     const { ethers } = require('ethers');
    
//     // 创建provider和wallet
//     const provider = new ethers.JsonRpcProvider(config.SEPOLIA_RPC);
//     const sponsorWallet = new ethers.Wallet(config.SPONSOR_PRIVATE_KEY, provider);
    
//     // 构造包含EIP-7702授权的交易
//     // 注意：ethers.js可能需要自定义交易序列化器来支持EIP-7702
//     // 这里是一个简化的概念性实现
//     const txRequest = {
//         to: "0x8c2451ae6edf47e9e17bcfa14062fc783df37d2f",
//         data: "0xa6d0ad610000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007b79995e5f793a07bc00c21412e50ecae098e7f900000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000000000000000000000000004d0e30db0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000009f61deb7909675f1330257499ac0c2428e2e1b000000000000000000000000000000000000000000000000000012309ce54000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007b79995e5f793a07bc00c21412e50ecae098e7f900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000009f61deb7909675f1330257499ac0c2428e2e1bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000", // 已有的input数据
//         type: 4, // EIP-7702交易类型
//         chainId: 11155111, // Sepolia
//         gasLimit: "0x4465b",
//         maxFeePerGas: "0x59caeb",
//         maxPriorityFeePerGas: "0xf4240",
//         value: 0,
//         customData: {
//             authorizationList: [
//                 {
//                     chainId: "0xaa36a7",
//                     address: "0x6a06b2b7f83514f42764d412e54afaf4bb0265c8",
//                     nonce: "0x3",
//                     yParity: "0x0",
//                     r: "0xe2e9be07dfeb0bf90c2f698e15a19b1ed5d58da21b4866d757e8b2540dc6bf9d",
//                     s: "0x60f611a51958f964245918f1df6bc9d0274a67487fa5f4b516ec23acb531f609"
//                 }
//             ]
//         }
//     };
    
//     // 注意：实际实现需要自定义序列化逻辑来处理EIP-7702交易
//     const tx = await sponsorWallet.sendTransaction(txRequest);
//     console.log("✅ Ethers replay transaction sent:", tx.hash);
// }

// 执行交易重放
alternativeReplay();